#!/usr/bin/env python3
import sys
import os
import rospy
import ensenso_camera.ros2 as ros2py

import numpy as np
import open3d as o3d
from std_msgs.msg import Bool
from sensor_msgs.msg import PointCloud2
from smabo import open3d_conversions

RequestData = ros2py.import_action("ensenso_camera_msgs", "RequestData")

Param={
  "streaming":False
}
Config={
  "folder":"/root/src",
  "prefix":"test",
  "ext":".ply"
}
def parse_argv(argv):
  args={}
  for arg in argv:
    tokens = arg.split(":=")
    if len(tokens) == 2:
      key = tokens[0]
      args[key] = tokens[1]
  return args

########################################################

def do_update():
  global stat
  if Param["debug"]: return

  f=True
  response = ros2py.send_action_goal(node, request_data_client, goal)
  if not response.successful():
    print("ens error")
    f=False
  else:
    print("request ok")
    result = response.get_result()
    if result.error.code != 0:
      print("ens error",result.error)
      f=False
    else:
      print("response ok")
  stat.data=f
  if not Param["streaming"]:
    pub_capture.publish(stat)

def cb_capture(msg):
  if not Param["streaming"]: do_update()
  else: pub_capture.publish(Bool())

def cb_loop(msg):
  try:
    Param.update(rospy.get_param("~param"))
  except Exception as e:
    print("get_param exception:",e.args)

  if Param["streaming"]: do_update()

  pub_stat.publish(stat)
  rospy.Timer(rospy.Duration(1),cb_loop,oneshot=True)

def isint(s):
  try:
    int(s, 10)
  except ValueError:
    return False
  else:
    return True

def cb_pc2(msg):
  global srcArray,Tcapt,Pcat,Reqcount
  pc=open3d_conversions.from_msg(msg)
  pc.scale(scale=1000.0,center=np.zeros(3))
  print("request data",len(pc.points),pc.get_center())
  pc2=open3d_conversions.to_msg(pc,frame_id=msg.header.frame_id)
  pub_pc2.publish(pc2)
  if Param["streaming"]: return
  datapath=Config["folder"]
  ls=os.listdir(datapath)
  sel=list(filter(lambda f:f.startswith(Config["prefix"]),ls))
  sel=list(filter(lambda f:f.endswith(Config["ext"]),sel))
  sel.sort()
  num=[]
  for s in sel:
    try:
      num.append(int(s[len(Config["prefix"]):-len(Config["ext"])]))
    except ValueError:
      pass
  newfile=datapath+'/'+Config["prefix"]+str(num[-1]+1)+Config["ext"]
  print("ensenso::write ply",newfile)
  o3d.io.write_point_cloud(newfile,pc)

if __name__ == "__main__":
  node = ros2py.create_node("ensenso_trigger", args=sys.argv)
  try:
    Param.update(rospy.get_param("~param"))
  except Exception as e:
    print("get_param exception:",e.args)

  rospy.Subscriber("~capture",Bool,cb_capture)
  rospy.Subscriber("~pc2in",PointCloud2,cb_pc2)
  pub_capture=rospy.Publisher("~captured",Bool,queue_size=1)
  pub_pc2=rospy.Publisher("~pc2out",PointCloud2,queue_size=1)
  pub_stat=rospy.Publisher("~stat",Bool,queue_size=1)

  stat=Bool()

  goal = RequestData.Goal()
  goal.parameter_set = ""
  goal.request_raw_images = True
  goal.request_rectified_images = True
  goal.request_disparity_map = False
  goal.request_depth_image = True
  goal.request_point_cloud = True
  goal.request_normals = False

  # By default the data is published and not included in the action response.
  goal.publish_results = True
  goal.include_results_in_response = False

  if not Param["debug"]:
    request_data_client_name = "request_data"
    request_data_client = ros2py.create_action_client(node, request_data_client_name, RequestData)

    ros2py.wait_for_server(node, request_data_client, timeout_sec=10)
    stat.data=True
    rospy.Timer(rospy.Duration(0.5),cb_loop,oneshot=True)

  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")


